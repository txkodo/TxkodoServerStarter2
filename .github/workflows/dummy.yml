name: Dummy

# secrets.GITHUB_TOKENにリポジトリへの書き込みを許可
permissions:
  contents: write
  pull-requests: write

# 同時起動とキャンセルを不可に
concurrency:
  group: 'build'
  cancel-in-progress: false

# github上の操作で起動
on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Select release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  # バージョンの更新とコミットの処理
  create-commit:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      # package.jsonのversionを次のバージョンに更新
      - uses: Server-Starter-for-Minecraft/VersionUpdater@v1
        id: get_version
        with:
          update-type: ${{inputs.type}}

      # git commit
      - name: git add & git commit
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add .
          git commit -m "🔖 Release ${{ steps.get_version.outputs.next-version }}"

      # mainに対してpullRequestを作成
      - name: Create Pull Request
        id: pullrequest
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 🔖 Release ${{ steps.get_version.outputs.next-version }}
          title: 🔖 Release ${{ steps.get_version.outputs.next-version }}
          body: 🔖 Release ${{ steps.get_version.outputs.next-version }}
          branch: 'release/v${{ steps.get_version.outputs.next-version }}'
          base: main
          labels: release
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>

      # pullRequestを承認
      # 承認者がいない場合にpullRequestがマージできないため
      - name: Approve Pull Request
        if: steps.pullrequest.outputs.pull-request-operation == 'created'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_ACCESS_TOKEN }}
        run: gh pr review "${{ steps.pullrequest.outputs.pull-request-number }}" --approve

      # pullRequestに自動マージを許可
      - name: Enable Pull Request Automerge
        if: steps.pullrequest.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.ACTION_ACCESS_TOKEN }}
          pull-request-number: ${{ steps.pullrequest.outputs.pull-request-number }}
          merge-method: merge

    outputs:
      current-version: ${{steps.get_version.outputs.current-version }}
      next-version: ${{steps.get_version.outputs.next-version }}
      brench-name: release/v${{ steps.get_version.outputs.next-version }}

  # 各osでelectronをビルド
  build-electron:
    needs: create-commit

    defaults:
      run:
        shell: bash

    # 各osで並列ビルド
    strategy:
      matrix:
        os: [macos-latest, windows-latest ,ubuntu-latest]
        new-ver: [true, false]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # releaseブランチをチェックアウト
      - name: Checkout release branch
        if: matrix.new-ver == true
        run: |
          git fetch origin ${{ needs.create-commit.outputs.brench-name }}
          git checkout ${{ needs.create-commit.outputs.brench-name }}

      # Nodejsを使用
      - name: Setup NodeJS Environment 18
        uses: actions/setup-node@v2
        with:
          node-version: 20
          cache: 'yarn'

      # create-commitで行った更新をpullし、ビルドを実行
      - name: Pull and Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git pull
          yarn install
          yarn build

      # WindowsのビルドデータをArtifactとして一時保存
      - name: Upload Artifact Win
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.new-ver}}.msi
          path: "${{github.workspace}}/dist/electron/Packaged/ServerStarter2.${{matrix.new-ver}}.msi"
          retention-days: 1

      # MacのビルドデータをArtifactとして一時保存
      - name: Upload Artifact Mac
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.new-ver}}.pkg
          path: "${{github.workspace}}/dist/electron/Packaged/ServerStarter2.pkg"
          retention-days: 1

      # Debianのビルドデータを指定のパスに移動
      - name: Upload Artifact Debian
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.new-ver}}.deb
          path: "${{github.workspace}}/dist/electron/Packaged/ServerStarter2.deb"
          retention-days: 1

      # Redhatのビルドデータを指定のパスに移動
      - name: Upload Artifact Redhat
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.new-ver}}.rpm
          path: "${{github.workspace}}/dist/electron/Packaged/ServerStarter2.rpm"
          retention-days: 1

  # リリースを作成
  create-release:
    needs:
      - create-commit
      - build-electron

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      # リリースとリリースノートを作成
      - name: Create a Release and Release note
        id: create_release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ needs.create-commit.outputs.next-version }}
          version: v${{ needs.create-commit.outputs.next-version }}
          commitish: ${{ needs.create-commit.outputs.brench-name }}
          publish: false # draft状態で作成
          prerelease: false

  # ビルドデータをアップロード
  upload-build:
    needs:
      - create-commit
      - create-release
    runs-on: ubuntu-latest

    # 各osのビルドデータを並列処理
    strategy:
      matrix:
        ext: [pkg, msi, deb, rpm]

    steps:
      # 一時保存したアーティファクトをダウンロード
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: true.${{ matrix.ext }}
          path: true.${{ matrix.ext }}

      # リリースにビルドデータをアップロード
      - name: Upload a Release Asset
        id: upload_release_asset_next
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: true.${{ matrix.ext }}
          asset_name: ServerStarter-v${{ needs.create-commit.outputs.next-version }}.${{ matrix.ext }}
          asset_content_type: appliction/${{ matrix.ext }}

      # 一時保存したアーティファクトをダウンロード(現行バージョン)
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: false.${{ matrix.ext }}
          path: false.${{ matrix.ext }}

      # リリースにビルドデータをアップロード(現行バージョン)
      - name: Upload a Release Asset
        id: upload_release_asset_current
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: false.${{ matrix.ext }}
          asset_name: ServerStarter-v${{ needs.create-commit.outputs.current-version }}.${{ matrix.ext }}
          asset_content_type: appliction/${{ matrix.ext }}

  # Discordに通知
  notify:
    needs:
      - create-commit
      - upload-build

    runs-on: ubuntu-latest

    # 失敗した場合も通知する
    if: always()

    steps:
      # ワークフローが失敗したかどうかを調べる
      - uses: technote-space/workflow-conclusion-action@v1

      # discordに通知
      - name: notify via discord
        uses: sarisia/actions-status-discord@v1
        with:
          title: Draft Release v${{ needs.create-commit.outputs.next-version }}
          description: |
            Click [here](https://github.com/${{ github.repository }}/releases) to open releases!
          url: 'https://github.com/${{ github.repository }}/releases'
          nocontext: true
          username: GitHub Actions
          webhook: ${{ secrets.DISCORD_WEBHOOK_BUILD }}
          status: ${{ env.WORKFLOW_CONCLUSION }}
